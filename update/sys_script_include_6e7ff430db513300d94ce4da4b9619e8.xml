<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_341321_nexmo_dir.BaseNotifyNexmoCallRecipe</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>BaseNotifyNexmoCallRecipe</name>
        <script><![CDATA[var BaseNotifyNexmoCallRecipe = Class.create();
BaseNotifyNexmoCallRecipe.prototype = Object.extendsObject(BaseRecipe, {

    initialize: function() {
    BaseRecipe.prototype.initialize.apply(this, arguments);
    this.nutil = new NotifyNexmoUtil();
    this.db = new global.NotifyDatabase();
    this.workflow = new global.NotifyWorkflow();
    this._callbacksCache = {};
    },

  getCallGr: function () {
    if (!this.data.callId)
      throw 'The Call SID is unavailable! Make sure that it is set as this.data.callId.';
    return this.db.getNotifyCallRecordByCallID(this.data.callId);
  },

  finishWaitingActivities: function (jsonArgs, getNext, actionSysId) {
    return this.workflow.finishWaitingActivitiesJ(this.data.notifyPhoneNumber, this.getCallGr(), jsonArgs, getNext, actionSysId);
  },

  getNexmomlFromAction: function (notifyAction) {
    return this.nutil.getNexmomlFromAction(notifyAction, this._resolveHandler.bind(this));
  },

  getNexmomlUrl: function (methodName, args) {    
    var url;
    if (this._callbacksCache[methodName])
      url = this._callbacksCache[methodName];
    else {
      url = this.ctx.getNexmomlUrl(methodName, this.getCallback(methodName), args);
      this._callbacksCache[methodName] = url;
    }
    return url;
  },

  getXmlUrl: function (methodName, args) {
    var url;
    if (this._callbacksCache[methodName])
      url = this._callbacksCache[methodName];
    else {
      url = this.ctx.getXmlUrl(methodName, this.getCallback(methodName), args);
      this._callbacksCache[methodName] = url;
    }
    return url;
  },

  _resolveHandler: function (name, type, args) {
    if (name === this.nutil.NEXMOML_URL_NAMES.CONF_STATUS) {
      return this.ctx.getXmlUrl('onStdConferenceStatus');
    } else if (name === this.nutil.NEXMOML_URL_NAMES.CONF_END) {
      return this.getNexmomlUrl('onConferenceEnd');
    } else if (name === this.nutil.NEXMOML_URL_NAMES.CONF_IMMEDIATE_GATHER_ACTION) {
      return this.getNexmomlUrl('onImmediateGatherPostConferenceEnd');
    } else if (name === this.nutil.NEXMOML_URL_NAMES.CATCH_ALL) {
      var lastTagName = args.lastTagName;
      var childTagName = args.withChildTagName;
      return this.getNexmomlUrl('onCatchAllEvent');
    } else if (name === this.nutil.NEXMOML_URL_NAMES.ENQ_WAIT) {
      return this.getNexmomlUrl('onEnQ');
    } else if (name === this.nutil.NEXMOML_URL_NAMES.LEFT_Q) {
      return this.getNexmomlUrl('noopNexmoml');
    } else if (name === this.nutil.NEXMOML_URL_NAMES.DIAL_ACTION) {
      return this.getNexmomlUrl('onDialEnd');
    } else if (name === this.nutil.NEXMOML_URL_NAMES.DIAL_RECORD_STATUS) {
      return this.getXmlUrl('onDialRecordStatus');
    } else if (name === this.nutil.NEXMOML_URL_NAMES.CLIENT_ACTION) {
      return this.getNexmomlUrl('onClientDialAction');
    } else if (name === this.nutil.NEXMOML_URL_NAMES.NUMBER_ACTION) {
      return this.getNexmomlUrl('onNumberDialAction');
    } else if (name === this.nutil.NEXMOML_URL_NAMES.CLIENT_STATUS) {
      return this.getXmlUrl('onClientDialCallStatus', {dialedTable: args.table, dialedSysid: args.sysid});
    } else if (name === this.nutil.NEXMOML_URL_NAMES.NUMBER_STATUS) {
      return this.getXmlUrl('onNumberDialCallStatus');
    } else if (name === this.nutil.NEXMOML_URL_NAMES.GATHER_ACTION || name === this.nutil.NEXMOML_URL_NAMES.GATHER_ACTION_FAILED) {
      return this.getNexmomlUrl('onInputReceived');
    } else if (name === this.nutil.NEXMOML_URL_NAMES.RECORD_ACTION) {
      return this.getNexmomlUrl('onRecordAction');
    } else if (name === this.nutil.NEXMOML_URL_NAMES.REJECT) {
      return this.getNexmomlUrl('onReject');
    } else if (name === this.nutil.NEXMOML_URL_NAMES.HANGUP) {
      return this.getNexmomlUrl('onHangUp');
    } else
      return this.resolveHandler(name, type, args);
  },

  resolveHandler: function (name, type, args) {
    // Meant to be implemented by subclass if required
    throw 'Unhandled url ' + name;
  },

  onCatchAllEvent: function (p) {
    return this.getNexmomlFromAction(this.finishWaitingActivities(null, true));
  },
  
  onEnQ: function (p) {
    // This exists purely to capture the queue sid then return the wait url for which this call was actually made.
    var queueSid = p.payload.QueueSid && p.payload.QueueSid[0];
    this.db.addQueueRecord(this.data.callId, queueSid);
    //this.finishWaitingActivities(null, false); PRB1318974 -- Queue activity should not finish while the call is in queue in Nexmo
    var h = new x_341321_nexmo_dir.NexmomlHelper().api();
        h.redirect(new ApiContext.NexmomlUrl('http://s3.amazonaws.com/com.Nexmo.sounds.music/index.xml'), 'GET');
        return h;
  },

  onInputReceived: function(p) {
    var payload = p.payload;
    var digits = payload.Digits && payload.Digits[0];
    if (!digits)
      digits = "";
    var args = {
      digits: digits
    };
    this.nutil.addInputCallStatus(this.data.callId, digits);
    return this.getNexmomlFromAction(this.finishWaitingActivities(args, true));
  },

  onDialEnd: function (p) {
    var payload = p.payload;
    var recordingUrl = payload.RecordingUrl && payload.RecordingUrl[0];
    // The below two parameters are deprecated by Nexmo. Ideally we should
    // capture them only from recording callback. However to keep in line
    // with Notify Nexmo Driver functionality we capture them here and send it
    // to the waiting activity.
    // However, we are deviating here and not actually creating the notify_record
    // here. Now we do that only from the record callback.
    var recordingSid = payload.RecordingSid && payload.RecordingSid[0];
    var recordingDuration = payload.RecordingDuration && payload.RecordingDuration[0]; // In sec
    // The dialed called has ended. Let's notify the workflow.
    var args = {};
    if (recordingUrl) {
      args = {
        recordingID: recordingSid,
        recordingURL: recordingUrl,
        recordingDuration: recordingDuration
      };
    }
    return this.getNexmomlFromAction(this.finishWaitingActivities(args, true));
  },
  
  onDialRecordStatus: function (p) {
    var payload = p.payload;
    var recordingStatus = payload.RecordingStatus && payload.RecordingStatus[0];
    if (recordingStatus === 'completed') {
      var recordingUrl = payload.RecordingUrl && payload.RecordingUrl[0];
      var recordingSid = payload.RecordingSid && payload.RecordingSid[0];
      var recordingDuration = payload.RecordingDuration && parseInt(payload.RecordingDuration[0]); // In sec
      if (!this.db.addRecording(this.data.callId, recordingSid, recordingDuration, recordingUrl))
        gs.error(this.type + ": Failed to record the recoding info in notify_record");
    } else if (recordingStatus === 'failed') {
      gs.error(this.type + ": Nexmo reported that it failed to record the call. Please login into Nexmo site for more details.");
    }
  },

  onClientDialAction: function (p) {
    // In Notify Nexmo Driver in this callback
    // it checks if the child call status is in progress
    // then it does not notify the workflow. Which always
    // the case.
    // Ideally we would want to trigger another workflow
    // on this child call record but that driver does not
    // do that, so we too do not do that. Override this hook
    // if you want to add that functionality.
    var h = new x_341321_nexmo_dir.NexmomlHelper().api();
    return h;
  },

  onRecordAction: function (p) {
    var payload = p.payload;
    var callId = payload.CallSid && payload.CallSid[0];
    var recordingUrl = payload.RecordingUrl && payload.RecordingUrl[0];
    var recordingDuration = payload.RecordingDuration && parseInt(payload.RecordingDuration[0]);
    var recordingId = payload.RecordingSid && payload.RecordingSid[0];
    var args = {
      recordingID: recordingId,
      recordingURL: recordingUrl,
      recordingDuration: recordingDuration
    };
    if (this.db.addRecording(callId, recordingId, recordingDuration, recordingUrl))
      return this.getNexmomlFromAction(this.finishWaitingActivities(args, true));
    else {
      gs.error("RecordAction: Failed to record the recoding info in notify_record");
      throw "RecordAction: Failed to record the recoding info in notify_record";
    }
  },

  onConferenceEnd: function(p) {
    return this.getNexmomlFromAction(this.finishWaitingActivities(null, true));
  },
  
  onImmediateGatherPostConferenceEnd: function (p) {
    var payload = p.payload;
    var digits = payload.Digits && parseInt(payload.Digits[0]);
    var args = {
      confDigits: digits
    };
    return this.getNexmomlFromAction(this.finishWaitingActivities(args, true));
  },
  
  onClientDialCallStatus: function (p) {
    var payload = p.payload;
    var callId = payload.CallSid && payload.CallSid[0];
    var calledNumber = payload.Called && payload.Called[0];
    var dialedTable = payload.dialedTable && payload.dialedTable[0];
    var dialedSysid = payload.dialedSysid && payload.dialedSysid[0];
    // Create child call record if it does not exist. Note we did not create a child ctx, so no need to release it.
    this.db.addClientChildCallRecordByIds(this.data.notifyNumberGrId, callId, this.getCallGr().getUniqueValue(), dialedSysid, dialedTable, "outbound");
    this.nutil.addCallStatusFromPayload(payload);
  },
  
  onNumberDialAction: function (p) {
    // In Notify Nexmo Driver (Legacy) in this callback
    // it checks if the child call status is in progress
    // then it does not notify the workflow. Which always
    // the case.
    // Ideally we would want to trigger another workflow
    // on this child call record but that driver does not
    // do that, so we too do not do that. Override this hook
    // if you want to add that functionality.
    return this.noopNexmoml();
  },
  
  onNumberDialCallStatus: function (p) {
    var payload = p.payload;
    var callId = payload.CallSid && payload.CallSid[0];
    var calledNumber = payload.Called && payload.Called[0];
    // Create child call record if it does not exist. Note we did not create a child ctx, so no need to release it.
    this.db.addChildCallRecordByIds(this.data.notifyNumberGrId, callId, this.getCallGr().getUniqueValue(), calledNumber, "outbound");
    this.nutil.addCallStatusFromPayload(payload);
  },
  
  onHangUp: function(p) {
    return this.getNexmomlFromAction(this.finishWaitingActivities(null, true));
  },

  onReject: function(p) {
    return this.getNexmomlFromAction(this.finishWaitingActivities(null, true));
  },

  noopNexmoml: function () {
    var h = new x_341321_nexmo_dir.NexmomlHelper().api();
    return h;
  },
  
    type: 'BaseNotifyNexmoCallRecipe'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-05-06 06:38:57</sys_created_on>
        <sys_id>6e7ff430db513300d94ce4da4b9619e8</sys_id>
        <sys_mod_count>6</sys_mod_count>
        <sys_name>BaseNotifyNexmoCallRecipe</sys_name>
        <sys_package display_value="Nexmo Direct Driver SMS" source="x_341321_nexmo_dir">d149fedadbfcf300d94ce4da4b96199e</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Nexmo Direct Driver SMS">d149fedadbfcf300d94ce4da4b96199e</sys_scope>
        <sys_update_name>sys_script_include_6e7ff430db513300d94ce4da4b9619e8</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-05-30 09:59:33</sys_updated_on>
    </sys_script_include>
</record_update>
