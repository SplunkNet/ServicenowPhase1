<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_operation">
    <sys_ws_operation action="INSERT_OR_UPDATE">
        <active>true</active>
        <consumes>application/json,application/xml,text/xml</consumes>
        <consumes_customized>false</consumes_customized>
        <default_operation_uri/>
        <enforce_acl>cf9d01d3e73003009d6247e603f6a990</enforce_acl>
        <http_method>GET</http_method>
        <name>SIngleDLR</name>
        <operation_script><![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {

    // implement resource here
//gs.info("------> into DLR GET"+request.pathParams.callback_name);
//	gs.info("------->into DLR GET type"+ request.pathParams.type);
	//gs.info("request query params:"+JSON.stringify(request.queryParams));
	gs.info("req query string:"+JSON.stringify(request.queryString));
	var helper = new NexmoHelper();
	var url;
	if (request.pathParams.type == 'nexmoml')
		url = helper.getNexmomlCallbackEndPoint(request.pathParams.callback_name);
	else if (request.pathParams.type == 'xml')
		url = helper.getXmlCallbackEndPoint(request.pathParams.callback_name);
	else
		return new sn_ws_err.BadRequestError('Unknown type value specified: ' + request.pathParams.type);
	url += (request.queryString ? "?" + request.queryString : "");
	
	var urlForValidation = url;
	if (url.startsWith('https://')) {
		var firstSlashPos = url.indexOf('/', 8);
		var firstColonPos = url.indexOf(':', 8);
		if (firstColonPos !== -1 && firstColonPos < firstSlashPos)
			urlForValidation = url.substring(0, firstColonPos) + url.substring(firstSlashPos);
	}
	var sMsgID,sStatus;
	var queryStringArr = request.queryString.split('&');
	var queryVal = [],queryAttr=[],Attr,Val;
	for (var i = 0; i < queryStringArr.length; i++) {
		var pairs = queryStringArr[i].split('=');
		queryAttr.push(pairs[0]);
		queryVal.push(pairs[1]);
		if(pairs[0]=="messageId")
			{ sMsgID = pairs[1];}
		if(pairs[0]=="status")
			{ sStatus = pairs[1];}
		
	}
	var gr_msg1 = new GlideRecord ('notify_message');
	gr_msg1.addQuery("message_id",sMsgID);
		gr_msg1.orderByDesc('sys_created_on');
		gr_msg1.setLimit(1);
		gr_msg1.query();			
		if (gr_msg1.next())
		{
			sStatus=sStatus.replaceAll("\"","");
			gr_msg1.setValue("status",sStatus);
			gr_msg1.update();
			gs.info("Status updated...");			
		}
	
	//display querystring array
/*	for (var j = 0; j < queryStringArr.length; j++) {
		gs.info("Querystring array:"+"   "+j+" is "+queryStringArr[j] );		
	}*/
	
/*	var formData = {};
	for (var k in request.queryParams) {
		if (queryKeys.indexOf(k) === -1) {
			var valsArr = request.queryParams[k];
			if (valsArr.length > 0)
				formData[k] = valsArr[0];
			else
				formData[k] = "";
		}
	}	*/
	var resp;
	
	var cApi  = new NexmoCallbackApi();
	if (request.pathParams.type == 'nexmoml ') {
		resp = cApi.getNexmomlResponse(request.pathParams.callback_name, request.queryParams);		
	} 
	else if (request.pathParams.type == 'xml') {
		resp = cApi.getXmlResponse(request.pathParams.callback_name, request.queryParams);		
	} 
	else
		resp = new sn_ws_err.BadRequestError('Unknown type value specified: ' + request.pathParams.type);		
	
	return resp;
})(request, response);]]></operation_script>
        <operation_uri>/api/x_341321_nexmo_dir/nexmosmsdlr/process/{type}/{callback_name}</operation_uri>
        <produces>application/json,application/xml,text/xml</produces>
        <produces_customized>false</produces_customized>
        <relative_path>/process/{type}/{callback_name}</relative_path>
        <request_example/>
        <requires_acl_authorization>true</requires_acl_authorization>
        <requires_authentication>false</requires_authentication>
        <requires_snc_internal_role>true</requires_snc_internal_role>
        <short_description/>
        <sys_class_name>sys_ws_operation</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-06-17 10:34:18</sys_created_on>
        <sys_id>3e1882dadb823300d1a31fc76896191b</sys_id>
        <sys_mod_count>17</sys_mod_count>
        <sys_name>SIngleDLR</sys_name>
        <sys_package display_value="Nexmo Direct Driver" source="x_341321_nexmo_dir">d149fedadbfcf300d94ce4da4b96199e</sys_package>
        <sys_policy/>
        <sys_scope display_value="Nexmo Direct Driver">d149fedadbfcf300d94ce4da4b96199e</sys_scope>
        <sys_update_name>sys_ws_operation_3e1882dadb823300d1a31fc76896191b</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-06-21 09:42:16</sys_updated_on>
        <web_service_definition display_value="NexmoSMSDLR">da0802dadb823300d1a31fc7689619f3</web_service_definition>
        <web_service_version/>
    </sys_ws_operation>
</record_update>
