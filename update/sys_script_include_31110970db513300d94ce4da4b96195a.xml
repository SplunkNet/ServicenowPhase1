<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_341321_nexmo_dir.NotifyNexmoOutboundCallRecipe</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>NotifyNexmoOutboundCallRecipe</name>
        <script><![CDATA[var NotifyNexmoOutboundCallRecipe = Class.create();
NotifyNexmoOutboundCallRecipe.prototype = Object.extendsObject(BaseNotifyNexmoCallRecipe, {
    initialize: function() {
		BaseNotifyNexmoCallRecipe.prototype.initialize.apply(this, arguments);
    },

	onStart: function (notifyPhoneNumber, toPhoneNumber) {
		var notifyGr = this.db.getNotifyNumberByNumber(notifyPhoneNumber);
		if (notifyGr)
			this.data.notifyNumberGrId = notifyGr.getUniqueValue();
		else {
			gs.error("Could not make call to {0} using Nexmo number {1} as it is not registered in notify_number", [toPhoneNumber, notifyPhoneNumber]);
			this.end();
			return;
		}
		this.data.toPhoneNumber = toPhoneNumber;
		this.saveData();
		var actiondata = this.ctx.getNexmomlUrl('callAnswered', this.getCallback('onCallAnswered'));
		var eventdata = this.ctx.getXmlUrl('primaryCallStatus', this.getCallback('onPrimaryCallStatus'));
		
		var actionUrl = actiondata.url;
		var eventUrl = eventdata.url;
	
		var JWToken = '';
		var target = new GlideRecord('x_341321_nexmo_dir_nexmo_config');
		target.query();
		target.next();
		var today = new GlideDateTime();

		var gdt = new GlideDateTime();
		gdt.addDaysUTC(1);
		if (target.expire > today) {
			JWToken = target.jwt_token.getDecryptedValue().toString();
		} else {
			var obj = new JsrsasignMain();
			var key = target.private_key.getDecryptedValue().toString();
			var sign = obj.assignTokenparams(key, target.application_id);
			JWToken = sign;
			var rec = new GlideRecord('x_341321_nexmo_dir_nexmo_config');
			rec.addQuery('application_id', target.application_id);
			rec.query();
			while (rec.next()) {
				rec.jwt_token = JWToken;
				rec.expire = gdt;
				rec.update();
			}
		}
		var sm = new sn_ws.RESTMessageV2('x_341321_nexmo_dir.nexmocall', 'POST');
		var endpoint = sm.getEndpoint();
		var request = new sn_ws.RESTMessageV2();
		request.setEndpoint(endpoint);
		request.setHttpMethod('POST');
		request.setRequestHeader("Content-type","application/json");
		request.setRequestHeader("Authorization","Bearer "+JWToken);
		request.setRequestBody('{"to": [{"number": "'+toPhoneNumber+'","type":"phone"}],"from":{"number":"'+notifyPhoneNumber+'","type": "phone"}, "answer_url": ["'+ actionUrl +'"],"event_url": ["'+ eventUrl +'"],"event_method": "GET"};');
		//request.setRequestBody('{"to": [{"number": "'+toPhoneNumber+'","type":"phone"}],"from":{"number":"'+notifyPhoneNumber+'","type": "phone"}, "ncco":[ {  "action": "talk",  "text": "An Incident of priority 1 is assigned to you",  "voiceName": "Amy", "bargeIn": false  },  { "action": "talk", "text": "Please Press 1 to accept, and 2 to reassign ticket.",  "voiceName": "Amy",  "bargeIn": true  },  {  "action": "input",    "timeOut": 10  }, { "action": "talk", "text": "Thanks for your input, goodbye.", "voiceName": "Amy"  } ], "answer_url": ["'+ actionUrl +'"],"event_url": ["'+ eventUrl +'"],"event_method": "GET"};');
		var responseres = request.execute();
		var nexmoreqbody = responseres.getBody();
		var requestString = JSON.parse(nexmoreqbody);	
		if (requestString.error) {
			gs.error("Could not make a call to {0} using Nexmo number {1} due to error {2}", [toPhoneNumber, notifyPhoneNumber, resp.error]);
			this.end();
		} else {
			this.data.callId = requestString.uuid;
			this.saveData();
			return this.data.callId;
		}
		
	},

	onCallAnswered: function (p) {
 		var payload = p.payload;
 		var callId = payload.uuid[0];
 		var answeredBy = "human";
 		var isMachine = answeredBy !== "human";
 		var h = new x_341321_nexmo_dir.NexmomlHelper().api();
 		if (callId !== this.data.callId) {
 			gs.error("Error! Received callback for unexpected call sid " + callId + " while expecting for call sid " + this.data.callId);
 			h.say("We received an unexpected callback. Cannot continue. Hanging up.");
 			h.hangup();
 			return h;
 		}
 		var callRecord = this.getCallGr();
 		callRecord = this.db.setIsHuman(callRecord, !isMachine);
 		var notifyAction = this.workflow.processAndWaitActivityJ(callRecord);
 		return this.getNexmomlFromAction(notifyAction);		
	},
	addInputCallStatus: function (p) {
		this.nutil.addInputCallStatus(p.uuid[0], p.dtmf[0]);
	},
	onPrimaryCallStatus: function (p) {	
		
		var payload =p.payload;
		var status = payload.status[0];
		var callId = payload.uuid[0];
		//var h = new x_341321_nexmo_dir.NexmomlHelper.api();
		/*if(status=='answered'){
			var isMachine = false;
			var callRecord = this.getCallGr();
			callRecord = this.db.setIsHuman(callRecord, !isMachine);		
			var notifyAction = this.workflow.processAndWaitActivityJ(callRecord);			
		}*/
// 		if(status=='answered'){
// 			var isMachine = false;
// 			var callRecord = this.getCallGr();
// 			//set who answered the call (machine vs human)
// 			callRecord = this.db.setIsHuman(callRecord, !isMachine);
// 			//execute the initial activity
// 			var notifyAction = this.workflow.processAndWaitActivityJ(callRecord);
// 			//h.say("We received an unexpected callback. Cannot continue. Hanging up.");
//  			//h.hangup();
//  			return notifyAction;
// 		}
		if (callId !== this.data.callId) {
			gs.error("Error! Received status update for unexpected call sid " + callId + " while expecting update for call sid " + this.data.callId);
			return;
		}
		this.nutil.addCallStatusFromPayload(payload);
	
		if (this.nutil.isCallOver(status))
			this.end(); // This is the end of journey for this call and its children calls
	},

    type: 'NotifyNexmoOutboundCallRecipe'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-05-06 06:45:51</sys_created_on>
        <sys_id>31110970db513300d94ce4da4b96195a</sys_id>
        <sys_mod_count>108</sys_mod_count>
        <sys_name>NotifyNexmoOutboundCallRecipe</sys_name>
        <sys_package display_value="Nexmo Direct Driver SMS" source="x_341321_nexmo_dir">d149fedadbfcf300d94ce4da4b96199e</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Nexmo Direct Driver SMS">d149fedadbfcf300d94ce4da4b96199e</sys_scope>
        <sys_update_name>sys_script_include_31110970db513300d94ce4da4b96195a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-06-20 09:41:28</sys_updated_on>
    </sys_script_include>
</record_update>
